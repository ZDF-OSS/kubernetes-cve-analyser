import os
import csv
import logging
from datetime import datetime
from colorama import Fore, init
from utils import get_cluster_name, get_all_images, filter_images, check_trivy_installed
from scan import scan_image
from report import save_to_detailed_csv, save_to_summary_csv, generate_html_summary

# Set up logging
logging.basicConfig(filename='scan.log', level=logging.INFO,
                    format='%(asctime)s:%(levelname)s:%(message)s')


def prompt_user(cluster_name):
    print(f"\nCluster Name: {cluster_name}")
    response = input(
        "Do you want to scan the current cluster content? (yes/no): ").strip().lower()
    return response == 'yes'


def main() -> None:
    print(f"{Fore.CYAN}Kubernetes CVE Scanner by ZERODOTFIVE Hamburg GmbH - moin@zerodotfive.com")
    if not check_trivy_installed():
        print(f"{Fore.RED}Trivy is not installed or not found in PATH. Please install Trivy to proceed.{Fore.RESET}")
        return

    cluster_name = get_cluster_name()

    if not prompt_user(cluster_name):
        print("Scan aborted.")
        return

    print("Starting scan... check scan.log for any issues.")
    images = get_all_images()

    # Add any other substrings you want to ignore here
    substrings_to_ignore = ["1234556678899"]
    filtered_images = filter_images(images, substrings_to_ignore)

    # Create a reports directory if it doesn't exist
    os.makedirs("reports", exist_ok=True)

    # Generate timestamp
    timestamp = datetime.now().strftime("%Y%m%d-%H%M")

    # Prefix files with date, time, and cluster name
    detailed_csv_file = f"reports/{timestamp}_{cluster_name}_scan_results_detailed.csv"
    summary_csv_file = f"reports/{timestamp}_{cluster_name}_scan_results_summary.csv"
    error_log_file = f"reports/{timestamp}_{cluster_name}_scan_errors.log"
    skip_list_file = f"reports/{timestamp}_{cluster_name}_skiplist.txt"
    html_report_file = f"reports/{timestamp}_{cluster_name}_scan_report.html"

    summaries = []

    with open(detailed_csv_file, mode='w', newline='') as detailed_file, \
            open(summary_csv_file, mode='w', newline='') as summary_file, \
            open(error_log_file, mode='w') as error_log, \
            open(skip_list_file, mode='w') as skip_list:

        detailed_fieldnames = ["Image", "Vulnerability ID",
                               "Severity", "Installed Version", "Fixed Version", "Title"]
        detailed_csv_writer = csv.DictWriter(
            detailed_file, fieldnames=detailed_fieldnames)
        detailed_csv_writer.writeheader()

        summary_fieldnames = ["Image", "Total",
                              "High", "Critical", "Medium", "Low"]
        summary_csv_writer = csv.DictWriter(
            summary_file, fieldnames=summary_fieldnames)
        summary_csv_writer.writeheader()

        for image in filtered_images:
            if image.startswith("sha256"):
                skip_list.write(f"Skipped image: {image}\n")
                logging.info(f"Skipped image: {image}")
                continue

            try:
                logging.info(f"Scanning image: {image}")
                scan_result, error_message = scan_image(image)
                if scan_result and 'Results' in scan_result and len(scan_result['Results']) > 0:
                    all_vulnerabilities = []
                    for result in scan_result['Results']:
                        vulnerabilities = result.get('Vulnerabilities', [])
                        save_to_detailed_csv(
                            image, vulnerabilities, detailed_csv_writer)
                        all_vulnerabilities.extend(vulnerabilities)

                    summary = {
                        'image': image,
                        'total': len(all_vulnerabilities),
                        'high': len([v for v in all_vulnerabilities if v['Severity'].upper() == 'HIGH']),
                        'critical': len([v for v in all_vulnerabilities if v['Severity'].upper() == 'CRITICAL']),
                        'medium': len([v for v in all_vulnerabilities if v['Severity'].upper() == 'MEDIUM']),
                        'low': len([v for v in all_vulnerabilities if v['Severity'].upper() == 'LOW']),
                    }
                    save_to_summary_csv(image, summary, summary_csv_writer)
                    summaries.append(summary)
                    print(f"{Fore.CYAN}Summary for {image}: {Fore.RESET}Total: {summary['total']}, "
                          f"{Fore.LIGHTRED_EX}High: {summary['high']}, "
                          f"{Fore.RED}Critical: {summary['critical']}, "
                          f"{Fore.YELLOW}Medium: {summary['medium']}, "
                          f"{Fore.GREEN}Low: {summary['low']}")
                    logging.info(f"Summary for {image}: Total: {summary['total']}, High: {summary['high']}, "
                                 f"Critical: {summary['critical']}, Medium: {summary['medium']}, Low: {summary['low']}")
                else:
                    error_message = f"Failed to scan image: {image}\n{error_message}\n"
                    logging.error(error_message)
                    error_log.write(error_message)
            except Exception as e:
                error_message = f"Exception occurred while scanning image: {image}\n{str(e)}\n"
                logging.error(error_message)
                error_log.write(error_message)

    generate_html_summary(summaries, html_report_file, cluster_name, timestamp)


if __name__ == "__main__":
    main()
