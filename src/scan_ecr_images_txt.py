import boto3
import json

def get_ecr_image_scan(image_uri):
    """
    Fetches the vulnerability scan findings for a specific ECR image using Amazon Inspector.
    
    Args:
    image_uri (str): The URI of the ECR image.
    
    Returns:
    dict: A dictionary containing the number of CRITICAL and HIGH vulnerabilities.
    """
    ecr_client = boto3.client('ecr')
    
    # Split image URI to get the repository name and image tag
    parts = image_uri.split('/')
    repo_name = parts[-2]
    image_tag = parts[-1]

    try:
        response = ecr_client.describe_image_scan_findings(
            repositoryName=repo_name,
            imageId={
                'imageTag': image_tag
            }
        )
        
        # Parse findings to count CRITICAL and HIGH severities
        findings = response.get('imageScanFindings', {}).get('findings', [])
        critical_vuln_count = sum(1 for finding in findings if finding['severity'] == 'CRITICAL')
        high_vuln_count = sum(1 for finding in findings if finding['severity'] == 'HIGH')
        
        return {
            'image': image_uri,
            'critical_vulns': critical_vuln_count,
            'high_vulns': high_vuln_count
        }
    
    except ecr_client.exceptions.ScanNotFoundException:
        print(f"Error: No scan found for {image_uri}")
        return {
            'image': image_uri,
            'critical_vulns': 0,
            'high_vulns': 0
        }
    except Exception as e:
        print(f"Error fetching scan for {image_uri}: {str(e)}")
        return {
            'image': image_uri,
            'critical_vulns': 0,
            'high_vulns': 0
        }


def read_images_from_file(file_path):
    """
    Reads ECR image URIs from a text file and returns them as a list.
    
    Args:
    file_path (str): The path to the text file containing ECR image URIs.
    
    Returns:
    list: A list of ECR image URIs.
    """
    try:
        with open(file_path, 'r') as file:
            images = [line.strip() for line in file.readlines()]
        return images
    except FileNotFoundError:
        print(f"Error: File {file_path} not found.")
        return []


def check_vulnerabilities_for_images(image_list):
    """
    Checks each image for vulnerabilities and prints a summary.
    
    Args:
    image_list (list): A list of ECR image URIs to check.
    """
    for image in image_list:
        result = get_ecr_image_scan(image)
        print(f"Image: {result['image']}, Critical: {result['critical_vulns']}, High: {result['high_vulns']}")


if __name__ == "__main__":
    # Replace with the path to your file containing ECR image URIs
    image_file = 'ecr_images.txt'

    # Read images from file
    images = read_images_from_file(image_file)

    # Check vulnerabilities for each image
    if images:
        check_vulnerabilities_for_images(images)
